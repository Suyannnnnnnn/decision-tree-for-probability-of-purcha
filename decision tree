import numpy as np # 快速操作结构数组的工具
import pandas as pd # 数据分析处理工具
from sklearn.preprocessing import LabelEncoder
from sklearn import tree

attr_arr=[['<=30','high','no','fair','no'],
         ['<=30','high','no','excellent','no'],
         ['[31,40]','high','no','fair','yes'],
         ['>40','medium','no','fair','yes'],
         ['>40','low','yes','fair','yes'],
         ['>40','low','yes','excellent','no'],
         ['[31,40]','low','yes','excellent','yes'],
         ['<=30','medium','no','fair','no'],
         ['<=30','low','yes','fair','yes'],
         ['>40','medium','yes','fair','yes'],
         ['<=30','medium','yes','excellent','yes'],
         ['[31,40]','medium','no','excellent','yes'],
         ['[31,40]','high','yes','fair','yes']]

#生成属性数据集和结果数据集
dataMat = np.mat(attr_arr)
arrMat = dataMat[:,0:4]
resultMat = dataMat[:,4]

# 构造数据集成pandas结构
attr_names = ['Age', 'Incoming', 'Student', 'Credit Rating']   #特征属性的名称
attr_pd = pd.DataFrame(data=arrMat,columns=attr_names)    #每行为一个对象，每列为一种属性，最后一个为结果值
print(attr_pd)

#将数据集中的字符串转化为代表类别的数字。因为sklearn的决策树只识别数字
le = LabelEncoder()
for col in attr_pd.columns:                                            #为每一列序列化,就是将每种字符串转化为对应的数字。用数字代表类别
    attr_pd[col] = le.fit_transform(attr_pd[col])
print(attr_pd)

# 构建决策树
clf = tree.DecisionTreeClassifier()
clf.fit(attr_pd, resultMat)
print(clf)

# 使用决策树进行预测
result = clf.predict(attr_pd)    # 输入也必须是数字的。分别代表了每个数字所代表的属性的字符串值
score = clf.score(attr_pd,resultMat)
print('resurt:',result)
print('score:',score)
